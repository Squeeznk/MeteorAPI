openapi: 3.0.3
info:
  title: Метеор API
  version: "1"
servers:
  - url: https://dev-meteor.automacon.ru/api
paths:
  /CreateTask:
    post:
      tags:
        - Создание/копирование задания
      summary: Создание/копирование задания
      description: Создание/копирование задания
      parameters:
        - name: name_task
          in: query
          description: Имя нового задания
          required: true
          explode: true
          schema:
            type: string
        - name: task_id
          in: query
          description: Используется при копировании. Имя задания, с которого копируем
          required: false
          explode: true
          schema:
            type: string
      requestBody:
        description: Метод для создания задания. Если передаем task_id, то это копирование. task_id - id задания, с которого копируем.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTask'
        required: true
      responses:
        '200':
          description: Выполнено
        
        '400':
          description: Описание ошибки 1С
  
  /TaskNextStage:
    post:
      tags:
        - Перевод на этап
      summary: Перевод на следующий этап
      description: Перевод на следующий этап
      operationId: TaskNextStage
      parameters:
        - name: task_id
          in: query
          description: ID Задания
          required: true
          schema:
            type: string
        - name: stage_id
          in: query
          description: Новый этап задания
          required: true
          schema:
            type: string
        - name: progress_id
          in: query
          description: Новое состояние задания
          required: false
          schema:
            type: string
        - name: comment
          in: query
          description: Комментарий к заданию
          required: false
          schema:
            type: string
        - name: executor_id
          in: query
          description: Новый исполнитель задания
          required: false
          schema:
            type: string
        - name: date
          in: query
          description: Дата дедлайна этапа
          required: false
          schema:
            type: string
        - name: canban_id
          in: query
          description: ID Доски канбан
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Выполнено
        '400':
          description: Описание ошибки 1С  
  /TaskStageAviable:
    post:
      tags:
        - Перевод на этап
      summary: Список доступных этапов задания
      description: Список доступных этапов для перехода.
      operationId: TaskStageAviable
      parameters:
        - name: task_id
          in: query
          description: ID Задания
          required: true
          schema:
            type: string
        - name: canban_id
          in: query
          description: ID Доски канбан
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Выполнено
        '400':
          description: Описание ошибки 1С  
  
  /AllMarks:
    post:
      tags:
        - Метки
      summary: Список всех доступных меток на проекте
      operationId: AllMarks
      parameters:
        - name: project_id
          in: query
          description: ID проекта
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Выполнено
        '400':
          description: Описание ошибки 1С  
  /TaskSetMark:
    post:
      tags:
        - Метки
      summary: Установка метки задания
      operationId: TaskSetMark
      parameters:
        - name: task_id
          in: query
          description: ID Задания
          required: true
          schema:
            type: string
        - name: mark_id
          in: query
          description: ID метки
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Выполнено
        '400':
          description: Описание ошибки 1С  
  /TaskDelMark:
    post:
      tags:
        - Метки
      summary: Снять метку с задания
      operationId: TaskDelMark
      parameters:
        - name: task_id
          in: query
          description: ID Задания
          required: true
          schema:
            type: string
        - name: mark_id
          in: query
          description: ID метки
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Выполнено
        '400':
          description: Описание ошибки 1С  
          

components:
  schemas:
    CreateTask:
      required:
        - name_task
      type: object
      properties:
        name_task:
          type: string
        task_id:
          type: string          
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        idd:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header